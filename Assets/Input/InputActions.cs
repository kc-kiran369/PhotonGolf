//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Ball"",
            ""id"": ""76ec2fab-6275-440f-b7a6-4d0e637a9b39"",
            ""actions"": [
                {
                    ""name"": ""OnBallPress"",
                    ""type"": ""Button"",
                    ""id"": ""938d444e-1c73-4a2b-ac88-d97df626c6b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnBallRelease"",
                    ""type"": ""Button"",
                    ""id"": ""786ea784-ec27-467c-be1d-2ed64604578c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnMouseDrag"",
                    ""type"": ""Value"",
                    ""id"": ""48194859-00a8-48e6-8183-a40f545e945e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OnRightMouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""d934db74-8ebe-4dcc-b017-32a35c91c13f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""50d89f00-1ea7-4a61-bf06-247d7c93152a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""OnBallPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e18d9db5-81a3-4397-a6f7-d3ec4db6375b"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnBallPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec57644d-1379-44cc-9eee-ed1390f2dc74"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""OnBallRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38dd2a86-8a60-4dee-9327-d0ab28910ae9"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnBallRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""256ce59b-f257-462d-aa2b-885dc3776468"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""OnMouseDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7963273a-c99f-4557-8849-211bd96fee37"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMouseDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4478f130-af96-46dd-b6ec-e8c0d9ecb084"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""OnRightMouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // Ball
        m_Ball = asset.FindActionMap("Ball", throwIfNotFound: true);
        m_Ball_OnBallPress = m_Ball.FindAction("OnBallPress", throwIfNotFound: true);
        m_Ball_OnBallRelease = m_Ball.FindAction("OnBallRelease", throwIfNotFound: true);
        m_Ball_OnMouseDrag = m_Ball.FindAction("OnMouseDrag", throwIfNotFound: true);
        m_Ball_OnRightMouseClick = m_Ball.FindAction("OnRightMouseClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ball
    private readonly InputActionMap m_Ball;
    private IBallActions m_BallActionsCallbackInterface;
    private readonly InputAction m_Ball_OnBallPress;
    private readonly InputAction m_Ball_OnBallRelease;
    private readonly InputAction m_Ball_OnMouseDrag;
    private readonly InputAction m_Ball_OnRightMouseClick;
    public struct BallActions
    {
        private @InputActions m_Wrapper;
        public BallActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnBallPress => m_Wrapper.m_Ball_OnBallPress;
        public InputAction @OnBallRelease => m_Wrapper.m_Ball_OnBallRelease;
        public InputAction @OnMouseDrag => m_Wrapper.m_Ball_OnMouseDrag;
        public InputAction @OnRightMouseClick => m_Wrapper.m_Ball_OnRightMouseClick;
        public InputActionMap Get() { return m_Wrapper.m_Ball; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BallActions set) { return set.Get(); }
        public void SetCallbacks(IBallActions instance)
        {
            if (m_Wrapper.m_BallActionsCallbackInterface != null)
            {
                @OnBallPress.started -= m_Wrapper.m_BallActionsCallbackInterface.OnOnBallPress;
                @OnBallPress.performed -= m_Wrapper.m_BallActionsCallbackInterface.OnOnBallPress;
                @OnBallPress.canceled -= m_Wrapper.m_BallActionsCallbackInterface.OnOnBallPress;
                @OnBallRelease.started -= m_Wrapper.m_BallActionsCallbackInterface.OnOnBallRelease;
                @OnBallRelease.performed -= m_Wrapper.m_BallActionsCallbackInterface.OnOnBallRelease;
                @OnBallRelease.canceled -= m_Wrapper.m_BallActionsCallbackInterface.OnOnBallRelease;
                @OnMouseDrag.started -= m_Wrapper.m_BallActionsCallbackInterface.OnOnMouseDrag;
                @OnMouseDrag.performed -= m_Wrapper.m_BallActionsCallbackInterface.OnOnMouseDrag;
                @OnMouseDrag.canceled -= m_Wrapper.m_BallActionsCallbackInterface.OnOnMouseDrag;
                @OnRightMouseClick.started -= m_Wrapper.m_BallActionsCallbackInterface.OnOnRightMouseClick;
                @OnRightMouseClick.performed -= m_Wrapper.m_BallActionsCallbackInterface.OnOnRightMouseClick;
                @OnRightMouseClick.canceled -= m_Wrapper.m_BallActionsCallbackInterface.OnOnRightMouseClick;
            }
            m_Wrapper.m_BallActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OnBallPress.started += instance.OnOnBallPress;
                @OnBallPress.performed += instance.OnOnBallPress;
                @OnBallPress.canceled += instance.OnOnBallPress;
                @OnBallRelease.started += instance.OnOnBallRelease;
                @OnBallRelease.performed += instance.OnOnBallRelease;
                @OnBallRelease.canceled += instance.OnOnBallRelease;
                @OnMouseDrag.started += instance.OnOnMouseDrag;
                @OnMouseDrag.performed += instance.OnOnMouseDrag;
                @OnMouseDrag.canceled += instance.OnOnMouseDrag;
                @OnRightMouseClick.started += instance.OnOnRightMouseClick;
                @OnRightMouseClick.performed += instance.OnOnRightMouseClick;
                @OnRightMouseClick.canceled += instance.OnOnRightMouseClick;
            }
        }
    }
    public BallActions @Ball => new BallActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IBallActions
    {
        void OnOnBallPress(InputAction.CallbackContext context);
        void OnOnBallRelease(InputAction.CallbackContext context);
        void OnOnMouseDrag(InputAction.CallbackContext context);
        void OnOnRightMouseClick(InputAction.CallbackContext context);
    }
}
